<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <script src="http://d3js.org/d3.v3.min.js"></script>
    <script src="/javascripts/jquery-1.8.0.min.js" type="text/javascript"></script>
    <link rel="stylesheet" href="/stylesheets/global.css" type="text/css" />
    <link rel="stylesheet" href="/stylesheets/monitor.css" type="text/css" />
    <link rel="stylesheet" href="/stylesheets/stat.css" type="text/css" />
<script>
var self = this;
var value = 1;
self.charts = {};
self.queries = get_querystring();
self.timer_interval = 5000;
setInterval(function() {
        // sort since we have added a new one
        self.refresh();
        value++;
        }, self.timer_interval);

function refresh() {
    var self = this;
    $.ajax({ url: '/getdata', data: {}, dataType: 'json', 
            success: function (data) {
            _data = data;
            self.updates(data.clusters);
            }, 
error: function(xhr, ajaxOptions, thrownError) {
alert("Check Monitoring Server: It might be dead.");
self.updatesAllError(self.charts);
}});
}

function updatesAllError(charts) {
    for (idx in charts) {
        var chartid = '#chart_' +idx + ' circle';
        self.updateCircle(chartid, 0, "fail");
    }
}

function updates(clusters) {
    var currentTimeMilliseconds = new Date().getTime();

    var group = self.queries['group'];
    var one = false;
    if (typeof group != 'undefined' && group != '') {
        one = true;
    }

    for (var cluster_name in clusters) {
        if (true == one && group != cluster_name) {
            continue;
        }

        var cluster = clusters[cluster_name];
        for (var i in cluster.nodes) {
            var node = cluster.nodes[i];
            self.charts[node.name] = 1;
            self.update(node, currentTimeMilliseconds, cluster.commands);
        }
        self['graph_cluster_commands_' + cluster_name + '_data'] = cluster.commands;
    }
}

function humanlize(value) {
    if( value < 1024 ) {
        return value;
    } else if ( value < (1024*1024) ) {
        return roundNumber(value/1024) + "k";
    } else if ( value < (1024*1024*1024) ) {
        return roundNumber(value/1024/1024) + "m";
    } else if ( value < (1024*1024*1024*1024) ) {
        return roundNumber(value/1024/1024/1024) + "g";
    }

    return value;
}

function roundNumber(num) {
    if (num==0 || num=="undefined") {
        return 0;
    }

    var dec=1;
    var result = Math.round(num*Math.pow(10,dec))/Math.pow(10,dec);
    var resultAsString = result.toString();
    if(resultAsString.indexOf('.') == -1) {
        resultAsString = resultAsString + '.0';
    }
    return resultAsString;
};

function get_querystring() {
    var query_string = {};
    var query = window.location.search.substring(1);
    var vars = query.split("&");
    for (var i=0;i<vars.length;i++) {
        var pair = vars[i].split("=");
        // If first entry with this name
        if (typeof query_string[pair[0]] === "undefined") {
            query_string[pair[0]] = pair[1];
            // If second entry with this name
            } else if (typeof query_string[pair[0]] === "string") {
            var arr = [ query_string[pair[0]], pair[1] ];
            query_string[pair[0]] = arr;
            // If third or later entry with this name
            } else {
            query_string[pair[0]].push(pair[1]);
        }
    } 
    return query_string;
}

function updateCircle(id, value, status) {
    var maxXaxisForCircle="40%";
    var maxYaxisForCircle="40%";
    var maxRadiusForCircle="125";

    self.circuitCircleRadius = d3.scale.pow().exponent(0.5).domain([0, 400]).range(["5", maxRadiusForCircle]); // requests per second per host
    self.circuitCircleYaxis = d3.scale.linear().domain([0, 400]).range(["30%", maxXaxisForCircle]);
    self.circuitCircleXaxis = d3.scale.linear().domain([0, 400]).range(["30%", maxYaxisForCircle]);
    self.circuitColorRange = d3.scale.linear().domain([10, 25, 40, 50]).range(["green", "#FFCC00", "#FF9900", "red"]);
    self.circuitErrorPercentageColorRange = d3.scale.linear().domain([0, 10, 35, 50]).range(["grey", "black", "#FF9900", "red"]);

    var newXaxisForCircle = self.circuitCircleXaxis(0);
    var newYaxisForCircle = self.circuitCircleYaxis(100);
    var newRadiusForCircle= self.circuitCircleRadius(value/120);
    var circuitColorRange = self.circuitColorRange(newRadiusForCircle);
    if(status == 'fail') {
        newRadiusForCircle = 1000;
        circuitColorRange = 'red';
    }

    d3.selectAll(id)
        .transition()
        .duration(400)
        .attr("cx", "25%")
        .attr("cy", newYaxisForCircle)
        .attr("r", newRadiusForCircle)
        .style("fill", circuitColorRange);
};

function updateLine(name, currentTimeMilliseconds) {
    var data = self['graph_' + name + '_data'];
    var id = '#graph_' + name + " path";

    var xScale = d3.time.scale().domain([new Date(currentTimeMilliseconds-(60*1000*2)), new Date(currentTimeMilliseconds)]).range([0, 140]);

    var yMin = d3.min(data, function(d) { return d.v; });
    var yMax = d3.max(data, function(d) { return d.v; });
    var yScale = d3.scale.linear().domain([yMin, yMax]).nice().range([60, 0]); // y goes DOWN, so 60 is the "lowest"

    // assign the X function to plot our line as we wish
    sparkline = d3.svg.line()
        .x(function(d) { 
                // return the X coordinate where we want to plot this datapoint based on the time
                return xScale(new Date(d.t));
                })
    .y(function(d) {
            return yScale(d.v);
            })
    .interpolate("basis");

    d3.selectAll(id)
        .attr("d", sparkline(data));
};

function updateInfo(service, cmd, cluster_cmd, hits, miss, expired, evicted) {
    var self = this;

    var mem_id = '#mem_' + service.name;
    var peak_id = '#peak_' + service.name;
    var role_id = '#role_' + service.name;
    var uptime_id = '#uptime_' + service.name;
    var user_id = '#user_' + service.name;
    var sys_id = '#sys_' + service.name;
    var exp_id = '#exp_' + service.name;
    var evt_id = '#evt_' + service.name;
    var cmd_id = '#cmd_' + service.name;
    var clu_cmd_id = '#cluster_cmd_' + service.name;
    var hits_id = '#hits_' + service.name;
    var miss_id = '#miss_' + service.name;
    var clients_id = '#cnt_clients_' + service.name;
    var slaves_id = '#cnt_slaves_' + service.name;

    $(mem_id).text(service.used_memory_human);
    $(peak_id).text(service.used_memory_peak_human);
    $(role_id).text(service.cluster_name + ":" + service.role);
    $(uptime_id).text(service.uptime_in_seconds);
    $(user_id).text(service.used_cpu_user);
    $(sys_id).text(service.used_cpu_sys);
    $(exp_id).text(humanlize(expired));
    $(evt_id).text(humanlize(evicted));
    $(cmd_id).text(humanlize(cmd));
    $(clu_cmd_id).text(humanlize(cluster_cmd));
    $(hits_id).text(humanlize(hits));
    $(miss_id).text(humanlize(miss));
    $(clients_id).text(service.connected_clients);
    $(slaves_id).text(service.connected_slaves);
};

function update(service, currentTimeMilliseconds, cluster_size) {
    var self = this;

    var mem_id = '#mem_' + service.name;
    var peak_id = '#peak_' + service.name;
    var role_id = '#role_' + service.name;
    var uptime_id = '#uptime_' + service.name;
    var user_id = '#user_' + service.name;
    var sys_id = '#sys_' + service.name;
    var exp_id = '#exp_' + service.name;
    var evt_id = '#evt_' + service.name;
    var cmd_id = '#cmd_' + service.name;
    var clu_cmd_id = '#cluster_cmd_' + service.name;
    var hits_id = '#hits_' + service.name;
    var miss_id = '#miss_' + service.name;

    var prev_hits = self['hits_' + service.name + '_data'];
    var prev_miss = self['miss_' + service.name + '_data'];
    var prev_expired = self['expired_' + service.name + '_data'];
    var prev_evicted = self['evicted_' + service.name + '_data'];
    var prev_total_commands_processed = self['graph_commands_' + service.name + '_data'];
    var prev_cluster_size = self['graph_cluster_commands_' + service.cluster_name + '_data'];

    var data = self['graph_' + service.name + '_data'];

    var newDataPoint;
    var cluster_cmd;
    var hits, miss, expired, evicted;

    if(typeof data == 'undefined') {
        var uptime_in_sec = service.uptime_in_seconds;
        if (uptime_in_sec == 0) {
            uptime_in_sec = 1;
        }

        newDataPoint = roundNumber(service.total_commands_processed/uptime_in_sec);
        cluster_cmd = roundNumber(cluster_size/uptime_in_sec);
        data = [{"v":parseFloat(newDataPoint), "t":currentTimeMilliseconds}];
        self['graph_' + service.name + '_data'] = data;

        hits = roundNumber(service.keyspace_hits/uptime_in_sec);
        miss = roundNumber(service.keyspace_misses/uptime_in_sec);
        expired = roundNumber(service.expired_keys/uptime_in_sec);
        evicted = roundNumber(service.evicted_keys/uptime_in_sec);
    } else {
        newDataPoint = service.total_commands_processed - prev_total_commands_processed;
        newDataPoint = roundNumber(newDataPoint/(self.timer_interval/1000));
        cluster_cmd = (cluster_size - prev_cluster_size);
        cluster_cmd = roundNumber(cluster_cmd/(self.timer_interval/1000));
        data.push({"v":parseFloat(newDataPoint), "t":currentTimeMilliseconds});
        hits = (service.keyspace_hits-prev_hits);
        hits = roundNumber(hits/(self.timer_interval/1000));
        miss = (service.keyspace_misses-prev_miss);
        miss = roundNumber(miss/(self.timer_interval/1000));
        expired = (service.expired_keys-prev_expired);
        expired = roundNumber(expired/(self.timer_interval/1000));
        evicted = (service.evicted_keys-prev_evicted);
        evicted = roundNumber(evicted/(self.timer_interval/1000));
    }

    self['graph_commands_' + service.name + '_data'] = service.total_commands_processed;
    self['hits_' + service.name + '_data'] = service.keyspace_hits;
    self['miss_' + service.name + '_data'] = service.keyspace_misses;
    self['expired_' + service.name + '_data'] = service.expired_keys;
    self['evicted_' + service.name + '_data'] = service.evicted_keys;

    var id = '#chart_' + service.name + " circle";
    updateCircle(id, newDataPoint, service.status);
    updateInfo(service, newDataPoint, cluster_cmd, hits, miss,
            expired, evicted);

    while(data.length > 50) {
        data.shift();
    }

    if(data.length == 1 && data[0].v == 0) {
        return;
    }

    if(data.length > 1 && data[0].v == 0 && data[1].v != 0) {
        data.shift();
    }

    updateLine(service.name, currentTimeMilliseconds);
}
</script>
  </head>
  <body>
      <div id="header">
          <h2><span id="title_name"><%= title %></span></h2>
      </div>
      <div class="container">
          <div id="dependencies" class="row dependencies">
          <%  
            var one = false;
            if (typeof group != 'undefined' && group != '') {
                one = true;
            }

            if (typeof group != 'undefined') {
                console.log("Not undefined");
            }

            if (group != '') {
                console.log("Not ''");
            }
            for (var idx in clusters.nodes) {
            var server = clusters.nodes[idx];
            console.log(group + " " + server.cluster_name);
            if (one == true && group != server.cluster_name) {
                continue;
            }
          %>
          <% include partial/display %>
          <%
          }
          %>
          </div>
      </div>
      <script>self.refresh()</script>
  </body>
</html>
